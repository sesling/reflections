How did viewing a diff between two versions of a file help you see the bug that was introduced?
It narrowed focus to just the lines that were changed, so I didn't have to slog through the entire program to find 
what was different from the first version to the second

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
I would say that the biggest advantage it provides is the ability to go back to the moment a file stopped working properly.
Depending on how often a file is saved, one might even be able to have each seperate line change as its own version, which would really help narrow down what the problem might or might not be.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does? 
Pros: Complete Control
Can make sure commits are after changes logical to you
Cons: Potential for user error
Requires remembering to save

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file seperately?
It seems that Git does it because it was designed with coding in mind, while Google Docs was made for text files.

How can you use the commands git log and git diff to view the history of files?
They allow you to retrieve and compare commit IDs, respectively. 

How might using version control make you more confident to make changes that could break something?
Unlike traditional saves, which overwrite the previous file, previous commits can always be retrieved, so it's not a problem to go back to a time when a program worked if one is unable to undo a mistake for whatever reason

Now that you have your workspace set up, what do you want to try using Git for?
I want to be more efficient and effective when it comes to coding for my machine learning course.